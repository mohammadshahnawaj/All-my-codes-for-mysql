CREATE DATABASE ORG;
SHOW DATABASES;
USE ORG;

CREATE TABLE Worker (
	WORKER_ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FIRST_NAME CHAR(25),
	LAST_NAME CHAR(25),
	SALARY INT(15),
	JOINING_DATE DATETIME,
	DEPARTMENT CHAR(25)
);

INSERT INTO Worker 
	(WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) VALUES
		(001, 'Monika', 'Arora', 100000, '14-02-20 09.00.00', 'HR'),
		(002, 'Niharika', 'Verma', 80000, '14-06-11 09.00.00', 'Admin'),
		(003, 'Vishal', 'Singhal', 300000, '14-02-20 09.00.00', 'HR'),
		(004, 'Amitabh', 'Singh', 500000, '14-02-20 09.00.00', 'Admin'),
		(005, 'Vivek', 'Bhati', 500000, '14-06-11 09.00.00', 'Admin'),
		(006, 'Vipul', 'Diwan', 200000, '14-06-11 09.00.00', 'Account'),
		(007, 'Satish', 'Kumar', 75000, '14-01-20 09.00.00', 'Account'),
		(008, 'Geetika', 'Chauhan', 90000, '14-04-11 09.00.00', 'Admin');

CREATE TABLE Bonus (
	WORKER_REF_ID INT,
	BONUS_AMOUNT INT(10),
	BONUS_DATE DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);

INSERT INTO Bonus 
	(WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) VALUES
		(001, 5000, '16-02-20'),
		(002, 3000, '16-06-11'),
		(003, 4000, '16-02-20'),
		(001, 4500, '16-02-20'),
		(002, 3500, '16-06-11');
        CREATE TABLE Title (
	WORKER_REF_ID INT,
	WORKER_TITLE CHAR(25),
	AFFECTED_FROM DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);

INSERT INTO Title 
	(WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM) VALUES
 (001, 'Manager', '2016-02-20 00:00:00'),
 (002, 'Executive', '2016-06-11 00:00:00'),
 (008, 'Executive', '2016-06-11 00:00:00'),
 (005, 'Manager', '2016-06-11 00:00:00'),
 (004, 'Asst. Manager', '2016-06-11 00:00:00'),
 (007, 'Executive', '2016-06-11 00:00:00'),
 (006, 'Lead', '2016-06-11 00:00:00'),
 (003, 'Lead', '2016-06-11 00:00:00');

select * from Worker;
select * from Bonus;
select * from Title;

/**1 Write an SQL query to fetch the names of workers who earn the highest salary.**/
SELECT CONCAT(FIRST_NAME," ",LAST_NAME) AS Worker_name, max(SALARY) FROM Worker;

/**2  Write an SQL query to fetch departments along with the total salaries paid for each of them.**/
SELECT DEPARTMENT, SUM(SALARY) AS Total_Salary from Worker GROUP BY DEPARTMENT;

/**3 Write an SQL query to fetch three max salaries from a table.**/
SELECT DISTINCT(SALARY) AS Max_salary FROM Worker ORDER BY SALARY DESC LIMIT 3;

/**4 Write an SQL query to print the name of employees having the highest salary in each department**/
SELECT * FROM(SELECT *, dense_rank() OVER(PARTITION BY DEPARTMENT ORDER BY SALARY DESC) AS HIGHEST_SALARY_RANK FROM Worker) RR WHERE HIGHEST_SALARY_RANK=1;

/** 5 Write an SQL query to fetch the last five records from a table.**/
SELECT * FROM Worker ORDER BY WORKER_ID DESC LIMIT 5;

/**6 Write an SQL query to fetch the first row of a table.**/
SELECT * FROM (SELECT *,ROW_NUMBER() OVER() AS rn FROM Worker) re WHERE rn=1; 

/**7 Write an SQL query to fetch the first 50% records from a table.**/
select * from (select * ,row_number() over() as rn from Worker) rr where rn<= (select count(WORKER_ID)/2 from Worker);

/**8 Write an SQL query to fetch the list of employees with the same salary.**/
SELECT w1.FIRST_NAME,w1.SALARY FROM Worker w1, Worker w2 WHERE w1.SALARY=w2.SALARY AND w1.FIRST_NAME != w2.FIRST_NAME;
/**9 Write an SQL query to determine the 5th highest salary without using   TOP or limit method.**/
SELECT SALARY AS 5th_highest_salary FROM Worker w1 where 4=(SELECT COUNT(DISTINCT SALARY) FROM Worker w2 WHERE w2.SALARY>w1.SALARY);
 
/**10 write to compare employee with their next employee**/
SELECT *,LEAD(SALARY) OVER(ORDER BY SALARY DESC) AS next_worker_salary FROM Worker; //**(on the basis of salary, comparing with the current worker with next worker)**/
